.apply(function() {
    if (.tmp.currency == null)
	.tmp.currency = .Map();

    //////////////////////////////////////////////////
    ////// Main helpers for currency operations //////
    ////// Support gold, silver and qp          //////
    //////////////////////////////////////////////////
    
    // Calculate if character can afford to pay an amount sum in <currency>
    .tmp.currency.canAfford = function(ch, amount, currency) {
	if (currency == "gold")
	    return (ch.gold + ch.silver / 100 >= amount); 
	else if (currency == "qp")
	    return (ch.questpoints >= amount); 
	else return (ch.gold * 100 + ch.silver >= amount); // default is silver
    };

    // Adjust prices for service lists
    // Druids pay 2x more, Fili followers pay 4x less
    // Clan servicers charge 2x less to their clanmates
    .tmp.currency.adjustPrice = function(ch, servicer, amount) {
	if (ch.is_npc()) return amount;
	if (ch.newbie) amount = amount / 10;
	else {
	    if (ch.profession.name == "druid")
		amount = amount * 2;
	    else if (.tmp.religion.hasPatron(ch, "fili", false))
		amount = amount / 4;
	    else if (servicer.getClan().toLower() != "none" &&
		     servicer.getClan().toLower() == ch.getClan().toLower())
		amount = amount / 2;
	}
	return amount;
    };
    
    // Receive an item as a reward
    .tmp.currency.gainItem = function(ch, vnum, verbose) {
	var obj; obj = .get_obj_index(vnum).create().obj_to_char(ch);
	if (verbose)
	    ch.act("{yВ награду ты получаешь {C%1$O4{y, ништяк!{x", obj);
	return;
    };
    
    // Receive exp as a reward
    .tmp.currency.gainXP = function(ch, amount, verbose) {
	if (verbose)
	    ch.act("{yТы получаешь {G%1$d {yочков опыта!{x", amount);
	ch.gainExp(amount);
	return;
    };

    // Give character qp, e.g. as a quest reward
    .tmp.currency.gainQP = function(ch, amount, verbose) {
	ch.questpoints = ch.questpoints + amount;
	if (verbose)
	    ch.act("{yВ награду ты получаешь {C%1$d {y{leqp{lrквестовых единиц{x{y, уииии!{x",
		.abs(amount));
	return;
    };
    
    // Characters pays (loses) amount in qp, e.g. as a payment for services
    .tmp.currency.payQP = function(ch, amount, verbose) {
	if (ch.questpoints >= amount) {
	    ch.questpoints = ch.questpoints - amount;
	    if (verbose)
		ch.act("{yТы вздыхаешь, выплачивая {R%1$d {y{leqp{lrквестовых единиц{x{y.{x",
		    .abs(amount));
	}
	else if (verbose)
	    ch.act("{yУ тебя всего {c%1$d {y{leqp{lrквестовых единиц{x{y -- а требуется {C%2$d{y.{x",
		ch.questpoints, .abs(amount));
	return;
    };
    
    // Input amount in silver, outputs formatted "X gold and Y silver"
    .tmp.currency.printMoney = function(amount) {
	if (amount == null || amount < 0) amount = 0; // sanity check;
	var msg; msg = "";
	var silver_amount, gold_amount;
	gold_amount = amount / 100;
	silver_amount = amount % 100;
	if (gold_amount != 0) {
	    msg = msg + .fmt('{1{Y%1$d{2 золот%1$Iой|ых|ых', .abs(gold_amount));
	    if (silver_amount != 0) msg = msg + .fmt(" и ");
	}
	if (silver_amount != 0)
	    msg = msg + .fmt('{1{W%1$d{2 серебрянн%1$Iую|ых|ых моне%1$Iту|ты|т', .abs(silver_amount));
	return msg;
    };
    
    // Give character <amount> in silver, e.g. as a quest reward 
    .tmp.currency.gainMoney = function(ch, amount, verbose) {
	var silver_amount, gold_amount;
	gold_amount = amount / 100;
	silver_amount = amount % 100;
	
	ch.silver = ch.silver + silver_amount;
	ch.gold = ch.gold + gold_amount;
	
	if (verbose)
	    ch.act("{yТвой кошелек становится тяжелее на %1$s.{x",
		.tmp.currency.printMoney(amount));
	return;
    };
    
    // Pay amount in gold + silver
    .tmp.currency.pay = function(ch, amount, verbose) {
	var silver_amount, gold_amount;
	gold_amount = amount / 100;
	silver_amount = amount % 100;

	if (.tmp.currency.canAfford(ch, amount, "silver")) {
	    var remains; remains = amount;
	    
	    // pay in silver first
	    remains = remains - .min(ch.silver, remains); 
	    ch.silver = ch.silver - (amount - remains); 

	    ch.gold = ch.gold - remains / 100; 
	    remains = remains - (remains / 100) * 100; 

	    if (remains > 0) { 
		ch.gold = ch.gold - 1; 
		ch.silver = ch.silver + (100 - remains); 
	    }

	    if (verbose)
		ch.act("{yТы вздыхаешь, выплачивая %1$s.{x",
		    .tmp.currency.printMoney(amount));
	    return;	 	        
	}
	return;
    };
    
    /*
     * base class for currency
     */
    this = .tmp.currency;
    Currency = function(name, aliases, format, whom) {
	this = .Map();
	this.name = name;       // symbolic name
	this.aliases = aliases; // pattern to match names against
	this.format = format;   // pattern to format amounts of currency
	this.whom = whom;       // genitive case plural 
	
	matches = function(str) {
	    return str.match(aliases);
	};
	toString = function(value) { 
	    return .fmt(format, value);
	};
	balance = function(ch) {
	    return 0;
	};
	deposit = function(ch, value) {
	};
	withdraw = function(ch, value) {
	    return false;
	};
	
	return this;
    };
    
    /*
     * quest points
     */
    QuestPoints = function() {
	this = Currency("qp", "qp|questpoints|кп", 
			 "%1$d квестов%1$Iую|ые|ых едини%1$Iцу|цы|ц",
			 "квестпоинтов");

	balance = function(ch) {
	    return ch.questpoints;
	};
	deposit = function(ch, value) {
	    ch.questpoints = ch.questpoints + value;
	};
	withdraw = function(ch, value) {
	    if (ch.questpoints < value)
		return false;
	    ch.questpoints = ch.questpoints - value;
	    return true;
	};
	return this;
    };
    
    /*
     * silver coins
     */
    Silver = function() {
	this = Currency("silver", "silver|coin|серебр[ао]",
			 "%1$d серебрян%1$Iый|ых|ых", "серебра");
	balance = function(ch) {
	    return ch.silver;
	};
	deposit = function(ch, value) {
	    ch.silver = ch.silver + value;
	};
	withdraw = function(ch, value) {
	    if (ch.silver < value)
		return false;
	    ch.silver = ch.silver - value;
	    return true;
	};
	return this;
    };
    
    /*
     * gold coins
     */
    Gold = function() {
	this = Currency("gold", "gold|золот[ао]",
			 "%1$d золот%1$Iой|ых|ых", "золота");
	balance = function(ch) {
	    return ch.gold;
	};
	deposit = function(ch, value) {
	    ch.gold = ch.gold + value;
	};
	withdraw = function(ch, value) {
	    if (ch.gold < value)
		return false;
	    ch.gold = ch.gold - value;
	    return true;
	};
	return this;
    };
    
    /*
     * items as currency (e.g. diamonds)
     */
    Item = function(aliases, format, whom, vnum) {
	this = Currency("" + vnum, aliases, format, whom);
	this.vnum = vnum;
	pObjIndex = .get_obj_index(vnum);

	balance = function(ch) {
	    var o, cnt;
	    cnt = 0;
	    for (o = ch.carrying; o != null; o = o.next_content)
		if (o.vnum == vnum)
		    cnt = cnt + 1;

	    return cnt;
	};
	deposit = function(ch, value) {
	    var i;
	    for (i = 0; i < value; i = i + 1) 
		pObjIndex.create().obj_to_char(ch);
	};
	withdraw = function(ch, value) {
	    var i, o;
	    for (i = 0; i < value; i = i + 1) {
		o = ch.get_obj_carry_vnum(vnum);
		if (o == null) 
		    return false;
		o.extract(true);
	    }
	    return true;
	};
	return this;
    };
    
    /*
     * base class to represent actual cost and payer 
     */
    Price = function(ch, amount, currency) {
	this = .Map();
	this.ch = ch;
	this.amount = amount;
	this.currency = currency;
	
	toString = function() {
	    return currency.toString(amount);
	};
	deposit = function() {
	    currency.deposit(ch, amount);
	};
	withdraw = function() {
	    if (currency.balance(ch) < amount)
		return false;
	    currency.withdraw(ch, amount);
	    return true;
	};
	
	return this;
    };
})

